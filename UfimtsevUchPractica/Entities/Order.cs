//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UfimtsevUchPractica.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Windows.Controls;

    public partial class Order
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Order()
        {
            this.OrderCar = new HashSet<OrderCar>();
        }

        public string Receiver
        {
            get
            {
                var order = UchPracticaEntities.GetContext().Order.Where(p => p.OrderID == OrderID).First();
                var client = UchPracticaEntities.GetContext().User.Where(p => p.UserID == order.UserID).First();
                var fio = client.UserSurname + " " + client.UserName + " " + client.UserPatronymic;
                return fio;
            }
        }

        public string Cost
        {

            get
            {                
                string orderPrice = "0";
                var carsInOrders = UchPracticaEntities.GetContext().OrderCar.Where(p => p.OrderID == this.OrderID).ToList();
                for (int k = 0; k < carsInOrders.Count; k++)
                {
                    orderPrice = (Convert.ToInt64(orderPrice) + Convert.ToInt64(carsInOrders[k].Car.Price)).ToString();
                }
                
                return orderPrice;

            }
        }

        public int CarCount
        {
            get
            {
                int count = 0;
                var orderCar = UchPracticaEntities.GetContext().OrderCar.Where(p => p.OrderID == this.OrderID).ToList();
                foreach( OrderCar car in orderCar)
                {
                    count += car.CountCar;
                }
                return count;

            }
        }

        public string Status
        {
            get
            {
                if(this.OrderStatusID == 1)
                {
                    return "Закрыт";
                }
                else
                {
                    return "Открыт";
                }
            }
        }

        public string Address
        {
            get
            {
                var address = UchPracticaEntities.GetContext().PickUpPoint.Where(p => p.PickUpPointID == this.PickUpPointID).First();
                return address.Address;
            }
        }

        public int OrderID { get; set; }
        public int OrderStatusID { get; set; }
        public System.DateTime OrderDeliveryDate { get; set; }
        public int PickUpPointID { get; set; }
        public System.DateTime OrderDate { get; set; }
        public int UserID { get; set; }
    
        public virtual OrderStatus OrderStatus { get; set; }
        public virtual PickUpPoint PickUpPoint { get; set; }
        public virtual User User { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<OrderCar> OrderCar { get; set; }
    }
}
